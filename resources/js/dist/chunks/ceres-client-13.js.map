{"version":3,"sources":["webpack:///resources/js/src/app/components/item/VariationSelect.vue","webpack:///./resources/js/src/app/components/item/VariationSelect.vue","webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/core-js/modules/es.object.entries.js","webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?2512","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?68f5","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?aaed"],"names":["NotificationService","require","name","props","forceContent","type","Boolean","default","inject","itemId","data","filteredVariationsCache","lastContentCount","mounted","$store","commit","concat","currentSelection","computed","currentVariation","getters","currentVariationSelect","state","items","variationSelect","hasEmptyOption","variations","some","variation","attributes","length","addPleaseSelectOption","App","config","item","showPleaseSelect","filteredVariations","filterVariations","possibleUnits","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","unitCombinationId","unitName","err","e","f","possibleUnitCombinationIds","transformPossibleUnits","map","isContentVisible","hasSelection","isNullOrUndefined","selectedAttributes","Object","values","selectedUnit","methods","selectAttribute","attributeId","attributeValueId","parseInt","onSelectionChange","selectUnit","unitId","setVariation","variationId","unsetInvalidSelection","qualifiedVariations","getQualifiedVariations","closestVariations","getClosestVariations","closestVariation","invalidSelection","getInvalidSelectionByVariation","correctSelection","getTooltip","attribute","attributeValue","isAttributeSelectionValid","getInvalidOptionTooltip","$translate","invalidSelections","attributesToReset","names","_iterator2","_step2","push","newUnit","join","isDefined","filter","find","closestSalableVariation","numberOfSalableChanges","closestNonSalableVariation","numberOfNonSalableChanges","_iterator3","_step3","changes","isNull","unitWeight","_iterator4","_step4","isSalable","_this","_loop","selectedAttributeId","variationAttribute","attributeToReset","attr","messages","JSON","parse","stringify","_iterator5","_step5","warn","closeAfter","strict","ignoreUnit","_this2","key","uniqueValues","_toConsumableArray","Set","isEmptyOptionSelected","_loop2","v","_ret","_typeof","filterSalableVariations","keys","isUnitSelectionValid","_this3","dispatch","then","document","dispatchEvent","CustomEvent","detail","documents","isTextCut","content","$refs","attributesContaner","textWidth","clientWidth","getSelectedAttributeValueName","selectedAttributeValueId","selectedAttributeValue","attrValue","_this4","entries","sort","unitA","unitB","splitUnitName","unitNameSplit","split","isNaN","replace","currencyPattern","separator_thousands","watch","render","_vm","_c","_self","staticClass","_l","index","ref","refInFor","attrs","id","on","change","$event","target","domProps","_v","_s","_e","selected","directives","rawName","expression","for","title","class","images","active","invalid","click","src","imageUrl","alt","_t","staticRenderFns","_withStripped"],"mappings":"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","file":"chunks/ceres-client-13.js","sourcesContent":["<template>\n    <div class=\"row\">\n        <template v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\">\n            <div class=\"col-12 variation-select\" v-for=\"(attribute, index) in attributes\" :key=\"index\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select :id=\"'custom-select_' + attribute.name\" class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\" data-testing=\"variation-select-dropdown\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\"\n                                :key=\"value.attributeValueId\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false)\">\n                                {{ $translate(\"Ceres::Template.singleItemNotSalableAttribute\", { \"name\": value.name }) }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label :for=\"'custom-select_' + attribute.name\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\" data-testing=\"variation-select-dropdown-label\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             data-testing=\"variation-select-box\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\n                             v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getTooltip(attribute, value)\"\n                             :key=\"value.attributeValueId\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\" data-testing=\"variation-select-unit\">\n                        <option\n                                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\n                                :value=\"unitCombinationId\"\n                                :selected=\"parseInt(unitCombinationId) === selectedUnit\"\n                                :key=\"unitCombinationId\">\n                            <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\n                                {{ possibleUnits[unitCombinationId] }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId] }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </template>\n\n        <template v-else>\n            <slot></slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    name: \"variation-select\",\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n    },\n\n    computed:\n    {\n        currentVariation() {\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            // use an object, to make the entries unique\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        possibleUnitCombinationIds()\n        {\n            return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        selectedAttributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = this.possibleUnitCombinationIds.length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariations = this.getClosestVariations(qualifiedVariations);\n            \n            // if the salable 'closestVariations' is undefined, take the not-salable one\n            const closestVariation = closestVariations[0] || closestVariations[1];\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        getTooltip(attribute, attributeValue)\n        {\n            if(!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true))\n            {\n                return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n            }\n            else if(attribute.type === \"image\")\n            {\n                return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\n                    attribute: attribute.name,\n                    value: attributeValue.name\n                });\n            }\n\n            return \"\";\n        },\n\n        /**\n         * returns a string for box tooltips, for not available options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariations   = this.getClosestVariations(qualifiedVariations);\n\n            if (!closestVariations || closestVariations.length <= 0)\n            {\n                return \"\";\n            }\n\n            const invalidSelections = [\n                !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\n                !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\n            ];\n\n            if (!!invalidSelections[0]\n                && !!invalidSelections[1]\n                && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length)\n            {\n                // there is a non-salable variation with less changes\n                return this.$translate(\"Ceres::Template.singleItemNotSalable\");\n            }\n\n            const invalidSelection = invalidSelections[0] || invalidSelections[1];\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariations(qualifiedVariations)\n        {\n            let closestSalableVariation, numberOfSalableChanges;\n            let closestNonSalableVariation, numberOfNonSalableChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\n                    const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n\n                    changes += unitWeight;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if(variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges))\n                {\n                    closestSalableVariation = variation;\n                    numberOfSalableChanges = changes;\n                }\n                else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges))\n                {\n                    closestNonSalableVariation = variation;\n                    numberOfNonSalableChanges = changes;\n                }\n            }\n\n            return [closestSalableVariation, closestNonSalableVariation];\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         * @param {boolean} filterSalableVariations\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n            let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n\n            if (filterSalableVariations)\n            {\n                variations = variations.filter(variation => variation.isSalable)\n            }\n\n            return variations.length > 0;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return this\n                .filterVariations(null, unitId)\n                .filter(variation => variation.isSalable)\n                .length > 0\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents,\n                                    itemId: this.itemId\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        },\n\n        transformPossibleUnits(possibleUnits)\n        {\n            return Object.entries(possibleUnits).sort((unitA, unitB) => {\n                unitA = this.splitUnitName(unitA[1]);\n                unitB = this.splitUnitName(unitB[1]);\n                // order by unit\n                if (unitA[1] < unitB[1]) {\n                    return -1;\n                }\n                if (unitA[1] > unitB[1]) {\n                    return 1;\n                }\n                // order by content (count)\n                if (unitA[0] < unitB[0]) {\n                    return -1;\n                }\n                if (unitA[0] > unitB[0]) {\n                    return 1;\n                }\n                return 0;\n            });\n        },\n        splitUnitName(unitName) {\n            const unitNameSplit = unitName.split(\" \");\n\n            if (!isNaN(unitNameSplit[0])) {\n                unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\n                unitNameSplit[0] = parseInt(unitNameSplit[0]);\n            }\n\n            return unitNameSplit;\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        },\n        variations()\n        {\n            // FIX unset variation cache after subsequent variations are loaded\n            this.filteredVariationsCache = {};\n        }\n    }\n}\n</script>\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    { staticClass: \"row\" },\n    [\n      _vm.attributes.length ||\n      (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n        ? [\n            _vm._l(_vm.attributes, function (attribute, index) {\n              return _c(\n                \"div\",\n                { key: index, staticClass: \"col-12 variation-select\" },\n                [\n                  attribute.type === \"dropdown\"\n                    ? _c(\n                        \"div\",\n                        {\n                          ref: \"attributesContaner\",\n                          refInFor: true,\n                          staticClass: \"input-unit\",\n                        },\n                        [\n                          _c(\n                            \"select\",\n                            {\n                              staticClass: \"custom-select\",\n                              attrs: {\n                                id: \"custom-select_\" + attribute.name,\n                                \"data-testing\": \"variation-select-dropdown\",\n                              },\n                              on: {\n                                change: function ($event) {\n                                  return _vm.selectAttribute(\n                                    attribute.attributeId,\n                                    $event.target.value\n                                  )\n                                },\n                              },\n                            },\n                            [\n                              _vm.addPleaseSelectOption || !_vm.hasSelection\n                                ? _c(\"option\", { domProps: { value: -1 } }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    ),\n                                  ])\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.hasEmptyOption ||\n                              _vm.selectedAttributes[attribute.attributeId] ===\n                                null\n                                ? _c(\n                                    \"option\",\n                                    {\n                                      domProps: {\n                                        value: null,\n                                        selected:\n                                          _vm.selectedAttributes[\n                                            attribute.attributeId\n                                          ] === null,\n                                      },\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm._l(attribute.values, function (value) {\n                                return _c(\n                                  \"option\",\n                                  {\n                                    key: value.attributeValueId,\n                                    domProps: {\n                                      value: value.attributeValueId,\n                                      selected:\n                                        value.attributeValueId ===\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ],\n                                    },\n                                  },\n                                  [\n                                    _vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(value.name) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : _vm.isAttributeSelectionValid(\n                                          attribute.attributeId,\n                                          value.attributeValueId,\n                                          false\n                                        )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemNotSalableAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemInvalidAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ],\n                                  ],\n                                  2\n                                )\n                              }),\n                            ],\n                            2\n                          ),\n                          _vm._v(\" \"),\n                          _c(\n                            \"label\",\n                            {\n                              directives: [\n                                {\n                                  name: \"tooltip\",\n                                  rawName: \"v-tooltip\",\n                                  value: _vm.isTextCut(attribute.name),\n                                  expression: \"isTextCut(attribute.name)\",\n                                },\n                              ],\n                              attrs: {\n                                for: \"custom-select_\" + attribute.name,\n                                \"data-toggle\": \"tooltip\",\n                                \"data-placement\": \"top\",\n                                title: attribute.name,\n                                \"data-testing\":\n                                  \"variation-select-dropdown-label\",\n                              },\n                            },\n                            [_vm._v(_vm._s(attribute.name))]\n                          ),\n                        ]\n                      )\n                    : attribute.type === \"box\" || attribute.type === \"image\"\n                    ? _c(\"div\", [\n                        _c(\n                          \"span\",\n                          {\n                            staticClass: \"text-muted\",\n                            attrs: { \"data-testing\": \"attribute-name\" },\n                          },\n                          [_vm._v(_vm._s(attribute.name) + \":\")]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"b\",\n                          { attrs: { \"data-testing\": \"attribute-value\" } },\n                          [\n                            _vm._v(\n                              _vm._s(\n                                _vm.getSelectedAttributeValueName(attribute)\n                              )\n                            ),\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          {\n                            staticClass: \"v-s-boxes py-3\",\n                            class: { images: attribute.type === \"image\" },\n                          },\n                          [\n                            _vm.addPleaseSelectOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === -1,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        -1\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          -1\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemPleaseSelect\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        null,\n                                        true\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          null\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function (value) {\n                              return _c(\n                                \"div\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"tooltip\",\n                                      rawName: \"v-tooltip\",\n                                      value: true,\n                                      expression: \"true\",\n                                    },\n                                  ],\n                                  key: value.attributeValueId,\n                                  staticClass: \"v-s-box bg-white\",\n                                  class: {\n                                    active:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ],\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    ),\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\",\n                                    \"data-html\": \"true\",\n                                    \"data-toggle\": \"tooltip\",\n                                    \"data-placement\": \"top\",\n                                    \"data-original-title\": _vm.getTooltip(\n                                      attribute,\n                                      value\n                                    ),\n                                  },\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        value.attributeValueId\n                                      )\n                                    },\n                                  },\n                                },\n                                [\n                                  attribute.type === \"box\"\n                                    ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                        _vm._v(_vm._s(value.name)),\n                                      ])\n                                    : _c(\"img\", {\n                                        staticClass: \"p-1\",\n                                        attrs: {\n                                          src: value.imageUrl,\n                                          alt: value.name,\n                                        },\n                                      }),\n                                ]\n                              )\n                            }),\n                          ],\n                          2\n                        ),\n                      ])\n                    : _vm._e(),\n                ]\n              )\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\",\n                        },\n                        on: {\n                          change: function ($event) {\n                            return _vm.selectUnit($event.target.value)\n                          },\n                        },\n                      },\n                      _vm._l(\n                        _vm.possibleUnitCombinationIds,\n                        function (unitCombinationId) {\n                          return _c(\n                            \"option\",\n                            {\n                              key: unitCombinationId,\n                              domProps: {\n                                value: unitCombinationId,\n                                selected:\n                                  parseInt(unitCombinationId) ===\n                                  _vm.selectedUnit,\n                              },\n                            },\n                            [\n                              _vm.isUnitSelectionValid(unitCombinationId)\n                                ? [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.possibleUnits[unitCombinationId]\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ]\n                                : [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemInvalidAttribute\",\n                                            {\n                                              name: _vm.possibleUnits[\n                                                unitCombinationId\n                                              ],\n                                            }\n                                          )\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ],\n                            ],\n                            2\n                          )\n                        }\n                      ),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\",\n                        },\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        ),\n                      ]\n                    ),\n                  ]),\n                ])\n              : _vm._e(),\n          ]\n        : [_vm._t(\"default\")],\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var DESCRIPTORS = require('../internals/descriptors');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar $propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\nvar propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\nvar push = uncurryThis([].push);\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {\n        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.es/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=4a939d05&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/alex/Documents/GitHub/pp-glomer-07/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a939d05')) {\n      api.createRecord('4a939d05', component.options)\n    } else {\n      api.reload('4a939d05', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=4a939d05&\", function () {\n      api.rerender('4a939d05', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=template&id=4a939d05&\""],"sourceRoot":""}